// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: chitchat/chitchat.proto

package chitchat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChitChat_Join_FullMethodName            = "/chitchat.ChitChat/Join"
	ChitChat_Leave_FullMethodName           = "/chitchat.ChitChat/Leave"
	ChitChat_PublishMessage_FullMethodName  = "/chitchat.ChitChat/PublishMessage"
	ChitChat_ReceiveMessages_FullMethodName = "/chitchat.ChitChat/ReceiveMessages"
)

// ChitChatClient is the client API for ChitChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChitChat service definition
type ChitChatClient interface {
	// Method for clients to join the chat
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Method for clients to leave the chat
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
	// Method for clients to publish messages
	PublishMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*PublishResponse, error)
	// Method for receiving messages as a stream
	ReceiveMessages(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastNotification], error)
}

type chitChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitChatClient(cc grpc.ClientConnInterface) ChitChatClient {
	return &chitChatClient{cc}
}

func (c *chitChatClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ChitChat_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, ChitChat_Leave_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatClient) PublishMessage(ctx context.Context, in *ChatMessage, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ChitChat_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chitChatClient) ReceiveMessages(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BroadcastNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChitChat_ServiceDesc.Streams[0], ChitChat_ReceiveMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[JoinRequest, BroadcastNotification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChat_ReceiveMessagesClient = grpc.ServerStreamingClient[BroadcastNotification]

// ChitChatServer is the server API for ChitChat service.
// All implementations must embed UnimplementedChitChatServer
// for forward compatibility.
//
// ChitChat service definition
type ChitChatServer interface {
	// Method for clients to join the chat
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Method for clients to leave the chat
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	// Method for clients to publish messages
	PublishMessage(context.Context, *ChatMessage) (*PublishResponse, error)
	// Method for receiving messages as a stream
	ReceiveMessages(*JoinRequest, grpc.ServerStreamingServer[BroadcastNotification]) error
	mustEmbedUnimplementedChitChatServer()
}

// UnimplementedChitChatServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChitChatServer struct{}

func (UnimplementedChitChatServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChitChatServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedChitChatServer) PublishMessage(context.Context, *ChatMessage) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedChitChatServer) ReceiveMessages(*JoinRequest, grpc.ServerStreamingServer[BroadcastNotification]) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveMessages not implemented")
}
func (UnimplementedChitChatServer) mustEmbedUnimplementedChitChatServer() {}
func (UnimplementedChitChatServer) testEmbeddedByValue()                  {}

// UnsafeChitChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChitChatServer will
// result in compilation errors.
type UnsafeChitChatServer interface {
	mustEmbedUnimplementedChitChatServer()
}

func RegisterChitChatServer(s grpc.ServiceRegistrar, srv ChitChatServer) {
	// If the following call pancis, it indicates UnimplementedChitChatServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChitChat_ServiceDesc, srv)
}

func _ChitChat_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChat_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_Leave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChat_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChitChatServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChitChat_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChitChatServer).PublishMessage(ctx, req.(*ChatMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChitChat_ReceiveMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChitChatServer).ReceiveMessages(m, &grpc.GenericServerStream[JoinRequest, BroadcastNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChitChat_ReceiveMessagesServer = grpc.ServerStreamingServer[BroadcastNotification]

// ChitChat_ServiceDesc is the grpc.ServiceDesc for ChitChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChitChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chitchat.ChitChat",
	HandlerType: (*ChitChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ChitChat_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ChitChat_Leave_Handler,
		},
		{
			MethodName: "PublishMessage",
			Handler:    _ChitChat_PublishMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveMessages",
			Handler:       _ChitChat_ReceiveMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chitchat/chitchat.proto",
}
